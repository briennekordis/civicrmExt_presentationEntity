<?php

/**
 * @package CRM
 * @copyright CiviCRM LLC https://civicrm.org/licensing
 *
 * Generated from presentation/xml/schema/CRM/Presentation/Presentation.xml
 * DO NOT EDIT.  Generated by CRM_Core_CodeGen
 * (GenCodeChecksum:8db6205232ac9a04b91496bd2112d1a0)
 */
use CRM_Presentation_ExtensionUtil as E;

/**
 * Database access object for the Presentation entity.
 */
class CRM_Presentation_DAO_Presentation extends CRM_Core_DAO {
  const EXT = E::LONG_NAME;
  const TABLE_ADDED = '';

  /**
   * Static instance to hold the table name.
   *
   * @var string
   */
  public static $_tableName = 'civicrm_presentation';

  /**
   * Should CiviCRM log any modifications to this table in the civicrm_log table.
   *
   * @var bool
   */
  public static $_log = TRUE;

  /**
   * Unique Presentation ID
   *
   * @var int|string|null
   *   (SQL type: int unsigned)
   *   Note that values will be retrieved from the database as a string.
   */
  public $id;

  /**
   * Topic of presentation
   *
   * @var string|null
   *   (SQL type: int unsigne)
   *   Note that values will be retrieved from the database as a string.
   */
  public $topic_id;

  /**
   * Title of presentation
   *
   * @var string|null
   *   (SQL type: varchar(255))
   *   Note that values will be retrieved from the database as a string.
   */
  public $title;

  /**
   * Date of original presentation
   *
   * @var string|null
   *   (SQL type: date)
   *   Note that values will be retrieved from the database as a string.
   */
  public $date;

  /**
   * Target audience of original presentation
   *
   * @var string|null
   *   (SQL type: int unsigne)
   *   Note that values will be retrieved from the database as a string.
   */
  public $audience_id;

  /**
   * Format of original presentation
   *
   * @var string|null
   *   (SQL type: int unsigne)
   *   Note that values will be retrieved from the database as a string.
   */
  public $type_id;

  /**
   * Length of original presentation in minutes
   *
   * @var int|string|null
   *   (SQL type: int)
   *   Note that values will be retrieved from the database as a string.
   */
  public $duration;

  /**
   * Additional Notes
   *
   * @var string|null
   *   (SQL type: longtext)
   *   Note that values will be retrieved from the database as a string.
   */
  public $notes;

  /**
   * Presentation file
   *
   * @var string|null
   *   (SQL type: blob)
   *   Note that values will be retrieved from the database as a string.
   */
  public $file;

  /**
   * Class constructor.
   */
  public function __construct() {
    $this->__table = 'civicrm_presentation';
    parent::__construct();
  }

  /**
   * Returns localized title of this entity.
   *
   * @param bool $plural
   *   Whether to return the plural version of the title.
   */
  public static function getEntityTitle($plural = FALSE) {
    return $plural ? E::ts('Presentations') : E::ts('Presentation');
  }

  /**
   * Returns all the column names of this table
   *
   * @return array
   */
  public static function &fields() {
    if (!isset(Civi::$statics[__CLASS__]['fields'])) {
      Civi::$statics[__CLASS__]['fields'] = [
        'id' => [
          'name' => 'id',
          'type' => CRM_Utils_Type::T_INT,
          'description' => E::ts('Unique Presentation ID'),
          'required' => TRUE,
          'where' => 'civicrm_presentation.id',
          'table_name' => 'civicrm_presentation',
          'entity' => 'Presentation',
          'bao' => 'CRM_Presentation_DAO_Presentation',
          'localizable' => 0,
          'html' => [
            'type' => 'Number',
          ],
          'readonly' => TRUE,
          'add' => NULL,
        ],
        'topic_id' => [
          'name' => 'topic_id',
          'type' => CRM_Utils_Type::T_INTUNSIGNE,
          'title' => E::ts('Topic'),
          'description' => E::ts('Topic of presentation'),
          'where' => 'civicrm_presentation.topic_id',
          'table_name' => 'civicrm_presentation',
          'entity' => 'Presentation',
          'bao' => 'CRM_Presentation_DAO_Presentation',
          'localizable' => 0,
          'html' => [
            'type' => 'CheckBox',
          ],
          'pseudoconstant' => [
            'optionGroupName' => 'pres_topic',
            'keyColumn' => 'label',
            'optionEditPath' => 'civicrm/admin/options/pres_topic',
          ],
          'add' => NULL,
        ],
        'title' => [
          'name' => 'title',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('Title'),
          'description' => E::ts('Title of presentation'),
          'maxlength' => 255,
          'size' => CRM_Utils_Type::HUGE,
          'where' => 'civicrm_presentation.title',
          'table_name' => 'civicrm_presentation',
          'entity' => 'Presentation',
          'bao' => 'CRM_Presentation_DAO_Presentation',
          'localizable' => 0,
          'html' => [
            'type' => 'Text',
          ],
          'add' => NULL,
        ],
        'date' => [
          'name' => 'date',
          'type' => CRM_Utils_Type::T_DATE,
          'title' => E::ts('Presentation date'),
          'description' => E::ts('Date of original presentation'),
          'where' => 'civicrm_presentation.date',
          'table_name' => 'civicrm_presentation',
          'entity' => 'Presentation',
          'bao' => 'CRM_Presentation_DAO_Presentation',
          'localizable' => 0,
          'html' => [
            'type' => 'Select Date',
          ],
          'add' => NULL,
        ],
        'audience_id' => [
          'name' => 'audience_id',
          'type' => CRM_Utils_Type::T_INTUNSIGNE,
          'title' => E::ts('Audience'),
          'description' => E::ts('Target audience of original presentation'),
          'where' => 'civicrm_presentation.audience_id',
          'table_name' => 'civicrm_presentation',
          'entity' => 'Presentation',
          'bao' => 'CRM_Presentation_DAO_Presentation',
          'localizable' => 0,
          'html' => [
            'type' => 'CheckBox',
          ],
          'pseudoconstant' => [
            'optionGroupName' => 'pres_audience',
            'keyColumn' => 'label',
            'optionEditPath' => 'civicrm/admin/options/pres_audience',
          ],
          'add' => NULL,
        ],
        'type_id' => [
          'name' => 'type_id',
          'type' => CRM_Utils_Type::T_INTUNSIGNE,
          'title' => E::ts('Type'),
          'description' => E::ts('Format of original presentation'),
          'where' => 'civicrm_presentation.type_id',
          'table_name' => 'civicrm_presentation',
          'entity' => 'Presentation',
          'bao' => 'CRM_Presentation_DAO_Presentation',
          'localizable' => 0,
          'html' => [
            'type' => 'Select',
          ],
          'pseudoconstant' => [
            'optionGroupName' => 'pres_type',
            'keyColumn' => 'label',
            'optionEditPath' => 'civicrm/admin/options/pres_type',
          ],
          'add' => NULL,
        ],
        'duration' => [
          'name' => 'duration',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('Duration'),
          'description' => E::ts('Length of original presentation in minutes'),
          'where' => 'civicrm_presentation.duration',
          'table_name' => 'civicrm_presentation',
          'entity' => 'Presentation',
          'bao' => 'CRM_Presentation_DAO_Presentation',
          'localizable' => 0,
          'html' => [
            'type' => 'Integer',
          ],
          'add' => NULL,
        ],
        'notes' => [
          'name' => 'notes',
          'type' => CRM_Utils_Type::T_LONGTEXT,
          'title' => E::ts('Notes'),
          'description' => E::ts('Additional Notes'),
          'where' => 'civicrm_presentation.notes',
          'table_name' => 'civicrm_presentation',
          'entity' => 'Presentation',
          'bao' => 'CRM_Presentation_DAO_Presentation',
          'localizable' => 0,
          'html' => [
            'type' => 'Text',
          ],
          'add' => NULL,
        ],
        'file' => [
          'name' => 'file',
          'type' => CRM_Utils_Type::T_BLOB,
          'title' => E::ts('File'),
          'description' => E::ts('Presentation file'),
          'where' => 'civicrm_presentation.file',
          'table_name' => 'civicrm_presentation',
          'entity' => 'Presentation',
          'bao' => 'CRM_Presentation_DAO_Presentation',
          'localizable' => 0,
          'html' => [
            'type' => 'File',
          ],
          'add' => NULL,
        ],
      ];
      CRM_Core_DAO_AllCoreTables::invoke(__CLASS__, 'fields_callback', Civi::$statics[__CLASS__]['fields']);
    }
    return Civi::$statics[__CLASS__]['fields'];
  }

  /**
   * Return a mapping from field-name to the corresponding key (as used in fields()).
   *
   * @return array
   *   Array(string $name => string $uniqueName).
   */
  public static function &fieldKeys() {
    if (!isset(Civi::$statics[__CLASS__]['fieldKeys'])) {
      Civi::$statics[__CLASS__]['fieldKeys'] = array_flip(CRM_Utils_Array::collect('name', self::fields()));
    }
    return Civi::$statics[__CLASS__]['fieldKeys'];
  }

  /**
   * Returns the names of this table
   *
   * @return string
   */
  public static function getTableName() {
    return self::$_tableName;
  }

  /**
   * Returns if this table needs to be logged
   *
   * @return bool
   */
  public function getLog() {
    return self::$_log;
  }

  /**
   * Returns the list of fields that can be imported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &import($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getImports(__CLASS__, 'presentation', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of fields that can be exported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &export($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getExports(__CLASS__, 'presentation', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of indices
   *
   * @param bool $localize
   *
   * @return array
   */
  public static function indices($localize = TRUE) {
    $indices = [];
    return ($localize && !empty($indices)) ? CRM_Core_DAO_AllCoreTables::multilingualize(__CLASS__, $indices) : $indices;
  }

}
